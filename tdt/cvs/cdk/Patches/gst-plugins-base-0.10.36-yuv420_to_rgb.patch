From ccd6f91364bbb3d69d31c1b466e0a6d3fb7a0991 Mon Sep 17 00:00:00 2001
From: Mohamed Hafsia <mohamed.hafsia@st.com>
Date: Tue, 4 Sep 2012 10:20:11 +0100
Subject: [PATCH 1/5] 
 Patch to optimise yuv420p to RGB conversion. This patch more than
 doubles performance. It would be possible to get a bit more by
 doing the whole lot in assembler, but probably not worth it.
 Remade by Stephen Clarke for gst-plugins-base-0.10.30.

Signed-off-by: David McKay <david.mckay@st.com>
Signed-off-by: Stephen Clarke <stephen.clarke@st.com>

---
 gst/ffmpegcolorspace/imgconvert.c          |   20 ++--
 gst/ffmpegcolorspace/imgconvert_template.h |  186 +++++++++++++++-------------
 2 files changed, 111 insertions(+), 95 deletions(-)

diff --git a/gst/ffmpegcolorspace/imgconvert.c b/gst/ffmpegcolorspace/imgconvert.c
index c670e25..b359fe0 100644
--- a/gst/ffmpegcolorspace/imgconvert.c
+++ b/gst/ffmpegcolorspace/imgconvert.c
@@ -1715,6 +1715,10 @@ yuva420p_to_yuv422 (AVPicture * dst, const AVPicture * src,
 #define ONE_HALF  (1 << (SCALEBITS - 1))
 #define FIX(x)    ((int) ((x) * (1<<SCALEBITS) + 0.5))
 
+#define CLAMP(x,min,max) ((x) < (min) ? (min) : (x) > (max) ? (max) : (x))
+
+#define CLAMP_RGB(x) CLAMP(x, 0, 255)
+
 #define YUV_TO_RGB1_CCIR(cb1, cr1)\
 {\
     cb = (cb1) - 128;\
@@ -1728,9 +1732,9 @@ yuva420p_to_yuv422 (AVPicture * dst, const AVPicture * src,
 #define YUV_TO_RGB2_CCIR(r, g, b, y1)\
 {\
     y = ((y1) - 16) * FIX(255.0/219.0);\
-    r = cm[(y + r_add) >> SCALEBITS];\
-    g = cm[(y + g_add) >> SCALEBITS];\
-    b = cm[(y + b_add) >> SCALEBITS];\
+    r = CLAMP_RGB((y + r_add) >> SCALEBITS);\
+    g = CLAMP_RGB((y + g_add) >> SCALEBITS);\
+    b = CLAMP_RGB((y + b_add) >> SCALEBITS);\
 }
 
 #define YUV_TO_RGB1(cb1, cr1)\
@@ -1745,19 +1749,19 @@ yuva420p_to_yuv422 (AVPicture * dst, const AVPicture * src,
 #define YUV_TO_RGB2(r, g, b, y1)\
 {\
     y = (y1) << SCALEBITS;\
-    r = cm[(y + r_add) >> SCALEBITS];\
-    g = cm[(y + g_add) >> SCALEBITS];\
-    b = cm[(y + b_add) >> SCALEBITS];\
+    r = CLAMP_RGB((y + r_add) >> SCALEBITS);\
+    g = CLAMP_RGB((y + g_add) >> SCALEBITS);\
+    b = CLAMP_RGB((y + b_add) >> SCALEBITS);\
 }
 
 #define Y_CCIR_TO_JPEG(y)\
- cm[((y) * FIX(255.0/219.0) + (ONE_HALF - 16 * FIX(255.0/219.0))) >> SCALEBITS]
+ CLAMP_RGB(((y) * FIX(255.0/219.0) + (ONE_HALF - 16 * FIX(255.0/219.0))) >> SCALEBITS)
 
 #define Y_JPEG_TO_CCIR(y)\
  (((y) * FIX(219.0/255.0) + (ONE_HALF + (16 << SCALEBITS))) >> SCALEBITS)
 
 #define C_CCIR_TO_JPEG(y)\
- cm[(((y) - 128) * FIX(127.0/112.0) + (ONE_HALF + (128 << SCALEBITS))) >> SCALEBITS]
+ CLAMP_RGB((((y) - 128) * FIX(127.0/112.0) + (ONE_HALF + (128 << SCALEBITS))) >> SCALEBITS)
 
 /* NOTE: the clamp is really necessary! */
 static inline int
diff --git a/gst/ffmpegcolorspace/imgconvert_template.h b/gst/ffmpegcolorspace/imgconvert_template.h
index fbd5d45..7ab3e78 100644
--- a/gst/ffmpegcolorspace/imgconvert_template.h
+++ b/gst/ffmpegcolorspace/imgconvert_template.h
@@ -21,6 +21,12 @@
 #define RGB_OUT(d, r, g, b) RGBA_OUT(d, r, g, b, 0xffU)
 #endif
 
+#ifndef __st200__
+#define pft(x) do { } while(0);
+#else
+#define pft(x) __builtin_prefetch(x)
+#endif
+
 static void glue (uyvy422_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,
                                         int width, int height)
 {
@@ -141,95 +147,101 @@ static void glue (yvyu422_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,
 static void glue (yuv420p_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,
                                         int width, int height)
 {
-  const uint8_t *y1_ptr, *y2_ptr, *cb_ptr, *cr_ptr;
-  uint8_t *d, *d1, *d2;
-  int w, y, cb, cr, r_add, g_add, b_add, width2;
-  uint8_t *cm = cropTbl + MAX_NEG_CROP;
-  unsigned int r, g, b;
+    const uint8_t * __restrict__ y1_ptr, * __restrict__ y2_ptr, * __restrict__ cb_ptr, * __restrict__ cr_ptr;
+    uint8_t * __restrict__ d, *d1, *d2;
+    int w, y, cb, cr, r_add, g_add, b_add, width2;
+    unsigned int r, g, b;
+    int src_linesize0 = src->linesize[0];
+    int src_linesize1 = src->linesize[1];
+    int src_linesize2 = src->linesize[2];
+    int dst_linesize = dst->linesize[0];
 
-  d = dst->data[0];
-  y1_ptr = src->data[0];
-  cb_ptr = src->data[1];
-  cr_ptr = src->data[2];
-  width2 = (width + 1) >> 1;
-  for (; height >= 2; height -= 2) {
-    d1 = d;
-    d2 = d + dst->linesize[0];
-    y2_ptr = y1_ptr + src->linesize[0];
-    for (w = width; w >= 2; w -= 2) {
-      YUV_TO_RGB1_CCIR (cb_ptr[0], cr_ptr[0]);
-      /* output 4 pixels */
-      YUV_TO_RGB2_CCIR (r, g, b, y1_ptr[0]);
-      RGB_OUT (d1, r, g, b);
+    d = dst->data[0];
+    y1_ptr = src->data[0]; pft(y1_ptr + 32); pft(y1_ptr + 64);
+    y2_ptr = y1_ptr + src_linesize0; pft(y2_ptr + 32);pft(y2_ptr + 64);
+    cb_ptr = src->data[1]; pft(cb_ptr + 32);
+    cr_ptr = src->data[2]; pft(cr_ptr + 32);
 
-      YUV_TO_RGB2_CCIR (r, g, b, y1_ptr[1]);
-      RGB_OUT (d1 + BPP, r, g, b);
+    width2 = (width + 1) >> 1;
 
-      YUV_TO_RGB2_CCIR (r, g, b, y2_ptr[0]);
-      RGB_OUT (d2, r, g, b);
+    for(;height >= 2; height -= 2) {
+        d1 = d;
+        d2 = d + dst_linesize;
+        for(w = width; w >= 2; w -= 2) {
+            YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);
+            /* output 4 pixels */
+            YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]);
+            RGB_OUT(d1, r, g, b);
 
-      YUV_TO_RGB2_CCIR (r, g, b, y2_ptr[1]);
-      RGB_OUT (d2 + BPP, r, g, b);
+            YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[1]);
+            RGB_OUT(d1 + BPP, r, g, b);
 
-      d1 += 2 * BPP;
-      d2 += 2 * BPP;
+            YUV_TO_RGB2_CCIR(r, g, b, y2_ptr[0]);
+            RGB_OUT(d2, r, g, b);
 
-      y1_ptr += 2;
-      y2_ptr += 2;
-      cb_ptr++;
-      cr_ptr++;
-    }
-    /* handle odd width */
-    if (w) {
-      YUV_TO_RGB1_CCIR (cb_ptr[0], cr_ptr[0]);
-      YUV_TO_RGB2_CCIR (r, g, b, y1_ptr[0]);
-      RGB_OUT (d1, r, g, b);
+            YUV_TO_RGB2_CCIR(r, g, b, y2_ptr[1]);
+            RGB_OUT(d2 + BPP, r, g, b);
 
-      YUV_TO_RGB2_CCIR (r, g, b, y2_ptr[0]);
-      RGB_OUT (d2, r, g, b);
-      d1 += BPP;
-      d2 += BPP;
-      y1_ptr++;
-      y2_ptr++;
-      cb_ptr++;
-      cr_ptr++;
-    }
-    d += 2 * dst->linesize[0];
-    y1_ptr += 2 * src->linesize[0] - width;
-    cb_ptr += src->linesize[1] - width2;
-    cr_ptr += src->linesize[2] - width2;
-  }
-  /* handle odd height */
-  if (height) {
-    d1 = d;
-    for (w = width; w >= 2; w -= 2) {
-      YUV_TO_RGB1_CCIR (cb_ptr[0], cr_ptr[0]);
-      /* output 2 pixels */
-      YUV_TO_RGB2_CCIR (r, g, b, y1_ptr[0]);
-      RGB_OUT (d1, r, g, b);
+            d1 += 2 * BPP;
+            d2 += 2 * BPP;
 
-      YUV_TO_RGB2_CCIR (r, g, b, y1_ptr[1]);
-      RGB_OUT (d1 + BPP, r, g, b);
+            y1_ptr += 2; pft(y1_ptr + 64);
+            y2_ptr += 2; pft(y2_ptr + 64);
+            cb_ptr++; pft(cb_ptr + 32);
+            cr_ptr++; pft(cr_ptr + 32);
+        }
+        /* handle odd width */
+        if (w) {
+            YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);
+            YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]);
+            RGB_OUT(d1, r, g, b);
 
-      d1 += 2 * BPP;
+            YUV_TO_RGB2_CCIR(r, g, b, y2_ptr[0]);
+            RGB_OUT(d2, r, g, b);
+            d1 += BPP;
+            d2 += BPP;
+            y1_ptr++;
+            y2_ptr++;
+            cb_ptr++;
+            cr_ptr++;
+        }
+        d += 2 * dst_linesize;
+        y1_ptr += 2 * src_linesize0 - width; pft(y1_ptr + 32); pft(y1_ptr + 64);
+       y2_ptr = y1_ptr + src_linesize0; pft(y2_ptr + 32); pft(y2_ptr + 64);
+        cb_ptr += src_linesize1 - width2; pft(cb_ptr + 32);
+        cr_ptr += src_linesize2 - width2; pft(cr_ptr + 32);
+    }
+    /* handle odd height */
+    if (height) {
+        d1 = d;
+        for(w = width; w >= 2; w -= 2) {
+            YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);
+            /* output 2 pixels */
+            YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]);
+            RGB_OUT(d1, r, g, b);
 
-      y1_ptr += 2;
-      cb_ptr++;
-      cr_ptr++;
-    }
-    /* handle width */
-    if (w) {
-      YUV_TO_RGB1_CCIR (cb_ptr[0], cr_ptr[0]);
-      /* output 2 pixel */
-      YUV_TO_RGB2_CCIR (r, g, b, y1_ptr[0]);
-      RGB_OUT (d1, r, g, b);
-      d1 += BPP;
+            YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[1]);
+            RGB_OUT(d1 + BPP, r, g, b);
 
-      y1_ptr++;
-      cb_ptr++;
-      cr_ptr++;
+            d1 += 2 * BPP;
+
+            y1_ptr += 2;
+            cb_ptr++;
+            cr_ptr++;
+        }
+        /* handle width */
+        if (w) {
+            YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);
+            /* output 2 pixel */
+            YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]);
+            RGB_OUT(d1, r, g, b);
+            d1 += BPP;
+
+            y1_ptr++;
+            cb_ptr++;
+            cr_ptr++;
+        }
     }
-  }
 }
 
 #ifndef RGBA_OUT
-- 
1.6.2.5

